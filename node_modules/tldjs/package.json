{
  "author": {
    "name": "Thomas Parisot",
    "url": "https://oncletom.io"
  },
  "name": "tldjs",
  "description": "JavaScript API to work against complex domain names, subdomains and URIs.",
  "version": "1.5.0",
  "homepage": "https://github.com/oncletom/tld.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/oncletom/tld.js.git"
  },
  "bugs": {
    "url": "https://github.com/oncletom/tld.js/issues"
  },
  "engines": {
    "node": "0.10.x"
  },
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "test": "npm run lint && npm run test-node && npm run test-browser",
    "lint": "jshint --config .jshintrc lib/**/*.js",
    "test-node": "mocha --reporter dot",
    "test-watch": "mocha --reporter dot --watch",
    "test-browser": "testling",
    "build": "node ./bin/update.js",
    "prepublish": "npm run build"
  },
  "tldjs": {
    "providers": {
      "publicsuffix": "https://publicsuffix.org/list/effective_tld_names.dat"
    }
  },
  "testling": {
    "files": "test/*.js",
    "harness": "mocha-bdd",
    "browsers": [
      "ie/7..10",
      "ff/latest..nightly",
      "chrome/latest..canary",
      "opera/latest..next",
      "safari/6.0",
      "iphone/6.0",
      "android/4.2"
    ]
  },
  "dependencies": {},
  "devDependencies": {
    "async": "~0.9.0",
    "expect.js": "~0.3.1",
    "jshint": "~2.5.1",
    "mocha": "~1.19.0",
    "request": "~2.36.0",
    "testling": "~1.6.1"
  },
  "keywords": [
    "tld",
    "sld",
    "domain",
    "browser",
    "uri",
    "url",
    "domain name",
    "subdomain",
    "public suffix"
  ],
  "readme": "# tld.js [![Build Status](https://secure.travis-ci.org/oncletom/tld.js.png?branch=master)](http://travis-ci.org/oncletom/tld.js)\n\n[![browser support](https://ci.testling.com/oncletom/tld.js.png)](https://ci.testling.com/oncletom/tld.js)\n\n> `tld.js` is JavaScript API to work against complex domain names, subdomains and URIs.\n\nIt answers with accuracy to questions like *what is the domain/subdomain of `mail.google.com` and `a.b.ide.kyoto.jp`?*\n\n`tld.js` is fully tested, works in Node.js and in the browser, with or without AMD.\nIts database keeps up to date thanks to Mozilla's [public suffix list](http://publicsuffix.org/list/) to have and keep up to date with domain names.\n\nThanks Mozilla!\n\n# Install\n\n<table>\n  <thead>\n    <tr>\n      <th>npm</th>\n      <th>bower</th>\n      <th>component</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>npm install --save tldjs</code></td>\n      <td><code>bower install --save tld</code></td>\n      <td><code>component install tld</code></td>\n    </tr>\n  </tbody>\n</table>\n\n\n# Using It\n\n## Node.js\n\n```javascript\nvar tld = require('tldjs');\n\ntld.getDomain('mail.google.co.uk');\n// -> 'google.co.uk'\n```\n\n## Browser\n\nA browser version is made available thanks to [Browserify CDN](http://wzrd.in/).\n\n```html\n<script src=\"http://wzrd.in/standalone/tldjs\">\n<script>\ntldjs.getDomain('mail.google.co.uk');\n// -> 'google.co.uk'\n</script>\n```\n\nYou can build your own by using [browserify](http://browserify.org/):\n\n```bash\nnpm install --save tldjs\nbrowserify -s tld -r node_nodules/tldjs/index.js -o tld.js\n```\n\nAn [UMD module](https://github.com/umdjs/umd) will be created as of `tld.js`.\n\n# API\n\n## tldExists()\n\nChecks if the TLD is valid for a given host.\n\n```javascript\ntld.tldExists('google.com'); // returns `true`\ntld.tldExists('google.google'); // returns `false` (not an explicit registered TLD)\ntld.tldExists('com'); // returns `true`\ntld.tldExists('uk'); // returns `true`\ntld.tldExists('co.uk'); // returns `true` (because `uk` is a valid TLD)\ntld.tldExists('amazon.fancy.uk'); // returns `true` (still because `uk` is a valid TLD)\ntld.tldExists('amazon.co.uk'); // returns `true` (still because `uk` is a valid TLD)\ntld.tldExists('https://user:password@example.co.uk:8080/some/path?and&query#hash'); // returns `true`\n```\n\n## getDomain()\n\nReturns the fully qualified domain from a host string.\n\n```javascript\ntld.getDomain('google.com'); // returns `google.com`\ntld.getDomain('fr.google.com'); // returns `google.com`\ntld.getDomain('fr.google.google'); // returns `google.google`\ntld.getDomain('foo.google.co.uk'); // returns `google.co.uk`\ntld.getDomain('t.co'); // returns `t.co`\ntld.getDomain('fr.t.co'); // returns `t.co`\ntld.getDomain('https://user:password@example.co.uk:8080/some/path?and&query#hash'); // returns `example.co.uk`\n```\n\n## getSubdomain()\n\nReturns the complete subdomain for a given host.\n\n```javascript\ntld.getSubdomain('google.com'); // returns ``\ntld.getSubdomain('fr.google.com'); // returns `fr`\ntld.getSubdomain('google.co.uk'); // returns ``\ntld.getSubdomain('foo.google.co.uk'); // returns `foo`\ntld.getSubdomain('moar.foo.google.co.uk'); // returns `moar.foo`\ntld.getSubdomain('t.co'); // returns ``\ntld.getSubdomain('fr.t.co'); // returns `fr`\ntld.getSubdomain('https://user:password@example.co.uk:8080/some/path?and&query#hash'); // returns ``\n```\n\n## getPublicSuffix()\n\nReturns the public suffix for a given host.\n\n```javascript\ntld.getPublicSuffix('google.com'); // returns `com`\ntld.getPublicSuffix('fr.google.com'); // returns `com`\ntld.getPublicSuffix('google.co.uk'); // returns `co.uk`\ntld.getPublicSuffix('s3.amazonaws.com'); // returns `s3.amazonaws.com`\n```\n\n## isValid()\n\nChecks if the host string is valid.\nIt does not check if the *tld* exists.\n\n```javascript\ntld.isValid('google.com'); // returns `true`\ntld.isValid('.google.com'); // returns `false`\ntld.isValid('my.fake.domain'); // returns `true`\ntld.isValid('localhost'); // returns `false`\ntld.isValid('https://user:password@example.co.uk:8080/some/path?and&query#hash'); // returns `true`\n```\n\n# Troubleshouting\n\n## Updating the TLDs List\n\nMany libraries offer a list of TLDs. But, are they up-to-date? And how to update them?\n\nHopefully for you, even if I'm flying over the world, if I've lost my Internet connection or even if\nyou do manage your own list, you can update it by yourself, painlessly.\n\nHow? By typing this in your console\n\n```bash\nnpm run build\n```\n\nA fresh copy will be made available as `./rules.json`.\n\nOpen an issue to request an update in all package systems (or do a PR with a bugfix version bump).\n\n\n# Contributing\n\nProvide a pull request (with tested code) to include your work in this main project.\nIssues may be awaiting for help so feel free to give a hand, with code or ideas.",
  "readmeFilename": "README.md",
  "_id": "tldjs@1.5.0",
  "dist": {
    "shasum": "c29c4d58791b7ad8708f89b5f33bd2fa52822032"
  },
  "_from": "tldjs@",
  "_resolved": "https://registry.npmjs.org/tldjs/-/tldjs-1.5.0.tgz"
}
